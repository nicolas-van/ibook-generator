
parser FireWolfParser:

ignore: "\\s+"
token identifier: "[a-zA-Z_][a-zA-Z0-9_]*"
token boolean_litteral: "true|false"
token float_litteral: "[0-9]+\.[0-9]*"
token integer_litteral: "[0-9]+"
token string_litteral: "\"[^\"]*\"|'[^']*'"
token null_litteral: "null"

token assignment: "=|\\+=|-=|\\*=|/=|%="
token logical_or: "or"
token logical_and: "and"
token equality: "==|!="
token relational: "<|>|<=|>="
token additive: "\\+|-"
token mult: "\\*|/|%"
token non: "not"

rule litteral: boolean_litteral | string_litteral | integer_litteral | float_litteral | null_litteral 

rule program: block "$"
rule block: statement*
rule statement : assignment_expr | if_statement

rule if_statement : "if" expression "then" block ("elseif" expression "then" block)* ["else" block] "end"
rule assignment_expr : expression (assignment expression)*

rule expression : cond_expr
rule cond_expr : logical_or_expr ["\\?" expression ":" expression]
rule logical_or_expr : logical_and_expr (logical_or logical_and_expr)*
rule logical_and_expr : equality_expr (logical_and equality_expr)*
rule equality_expr : relational_expr (equality relational_expr)*
rule relational_expr : additive_expr (relational additive_expr)*
rule additive_expr : mult_expr (additive mult_expr)*
rule mult_expr : unary_expr (mult unary_expr)*
rule unary_expr : (additive | non) unary_expr | postfix_expr
rule postfix_expr : rvalue (table_acc | function_call)* {{return ('rvalue',)}} | "\\(" expression "\\)"
rule table_acc : "\\[" expression "\\]"
rule function_call : "\\(" [(expression ("," expression)* [","] )] "\\)"
rule rvalue : litteral {{return ('litteral',litteral)}}| identifier {{return ('identifier',)}}
    | list {{return ('list',)}}| dictionary {{return ('dictionary',)}}
rule list : "\\[" [( expression ( "," expression  )* [","]  )]  "\\]"
rule dictionary : "{" [( expression ":" expression ( "," expression ":" expression )* [","] )] "}"


 

