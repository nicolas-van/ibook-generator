
Lexical Analysis:
=================

identifier : [a-zA-Z_][a-zA-Z0-9_]+
boolean_litteral : "true" , "false"
integer_litteral : [0-9]+
float_litteral : integer_litteral "." integer_litteral?
string_litteral : "..." or '...'
null_litteral : "null"

# operators:
assignment : = , += , -= , *= , /= , %=
logical_or : || , "or"
logical_and : && , "and"
equality : == , != , "eq" , "ne"
relational : < , > , <= , >= , "lt" , "gt" , "le" , "ge"
additive : + , -
mult : * , / , %
non : ! , "not"

# other operators:
qmark: "?"
colon: ":"
lpar: "("
rpar: ")"
comma: ","
lsqbrack: "["
rsqbrack: "]"
lcubrack: "{"
rcubrack: "}"

# reserved keywords:
if then elseif else end

# reserved keywords previously cited:
# true false null
# and or not lt gt le ge eq ne


Syntaxic Analysis:
==================

litteral : boolean_litteral | string_litteral | integer_litteral | float_litteral | null_litteral

program : block
block : statement*
statement : assignment_expr | if_statement

if_statement : "if" expression "then" block ("elseif" expression "then" block)* ("else" block)? "end"
assignment_expr : expression (assignment expression)*

expression : cond_expr
cond_expr : logical_or_expr ("?" expression ":" expression)
logical_or_expr : logical_and_expr (logical_or logical_and_expr)*
logical_and_expr : equality_expr (logical_and equality_expr)*
equality_expr : relational_expr (equality relational_expr)*
relational_expr : additive_expr (relational additive_expr)*
additive_expr : mult_expr (additive mult_expr)*
mult_expr : unary_expr (mult unary_expr)*
unary_expr : ("+" | "-" | non) unary_expr | postfix_expr
postfix_expr : rvalue table_or_function? | "(" expression ")"
table_or_function : "[" expression "]" | "(" (expression ("," expression)* ",")? ")"
rvalue : litteral | identifier | list | dictionary
list : "[" ( expression ( "," expression  )* ","?  )?  "]"
dictionary : "{" ( expression ":" expression ( "," expression ":" expression )* ","? )? "}"


